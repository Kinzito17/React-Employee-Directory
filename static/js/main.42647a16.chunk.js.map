{"version":3,"sources":["components/Jumbotron/index.js","utils/API.js","components/SearchResults/index.js","components/SearchForm/index.js","pages/Home.js","components/Wrapper/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","axios","get","SearchResults","props","Table","striped","bordered","hover","variant","employees","map","employee","a","key","src","picture","thumbnail","alt","name","first","last","email","phone","location","country","state","city","SearchForm","useState","setEmployees","filteredEmployees","setFilteredEmployees","useEffect","loadFifty","API","then","res","data","results","catch","err","console","log","employeeSearch","evt","list","filteredList","filter","Object","values","join","toLowerCase","indexOf","filterEmployee","Form","Group","Label","Control","type","placeholder","onChange","target","value","Home","Container","fluid","Wrapper","Footer","href","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6UAceA,MAVf,WACI,OACI,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,yB,iDCJD,EACH,WACR,OAAOC,IAAMC,IAJD,0C,gBCwCDC,MAtCf,SAAuBC,GAErB,OAEE,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,QAEpC,+BACE,4BACE,qCACA,yCACA,qCACA,qCACA,uCACA,qCACA,sCAGJ,+BAEIL,EAAMM,UAAUC,KAAI,SAACC,EAAUC,GAAX,OAClB,wBAAIC,IAAKD,GAEP,4BAAI,yBAAKE,IAAKH,EAASI,QAAQC,UAAWC,IAAKN,EAASO,QACxD,sCAAQP,EAASO,KAAKC,MAAtB,YAA+BR,EAASO,KAAKE,OAC7C,4BAAKT,EAASU,OACd,4BAAKV,EAASW,OACd,4BAAKX,EAASY,SAASC,SACvB,4BAAKb,EAASY,SAASE,OACvB,4BAAKd,EAASY,SAASG,aCgCtBC,MAxDf,WAAuB,IAAD,EAEwBC,mBAAS,IAFjC,gCAGcA,mBAAS,KAHvB,mBAGbnB,EAHa,KAGFoB,EAHE,OAI8BD,mBAAS,IAJvC,mBAIbE,EAJa,KAIMC,EAJN,KAQpBC,qBAAU,WACRC,MACC,IAGH,IAAMA,EAAY,WAChBC,IACGC,MAAK,SAAAC,GACJP,EAAaO,EAAIC,KAAKC,SACtBP,EAAqBK,EAAIC,KAAKC,YAI/BC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAG9B,SAASG,EAAeC,IAIxB,SAAwBA,EAAKC,GAC3BJ,QAAQC,IAAIE,GACZ,IAAME,EAAeD,EAAKE,QAAO,SAAApC,GAI/B,OAA8C,IAHjCqC,OAAOC,OAAOtC,GACxBuC,KAAK,IACLC,cACWC,QAAQR,EAAIO,kBAE5BpB,EAAqBe,GAXrBO,CAAeT,EAAKnC,GAetB,OACE,oCACE,kBAAC6C,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,uBACA,kBAACF,EAAA,EAAKG,QAAN,CACEC,KAAK,OACLC,YAAY,6BACZzC,KAAK,iBACL0C,SAAU,SAAAhB,GAAG,OAAID,EAAeC,EAAIiB,OAAOC,WAG/C,kBAAC,EAAD,CAAerD,UAAWqB,MCzCjBiC,MAZf,WAEI,OACI,6BACI,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,EAAD,S,MCLDC,MAJf,SAAiB/D,GACf,OAAO,wCAAMJ,UAAU,WAAcI,K,MCaxBgE,MAdf,WACE,OACE,4BAAQpE,UAAU,UAEhB,uBAAGqE,KAAK,gCAAgCrE,UAAU,uCAAuC8D,OAAO,UAAhG,UACA,uBAAGO,KAAK,uDAAuDrE,UAAU,yCAAyC8D,OAAO,UAAzH,YACA,uBAAGO,KAAK,qCAAqCrE,UAAU,0CAA0C8D,OAAO,UAAxG,aAEA,0BAAM9D,UAAU,2BAAhB,0BCQSsE,MAbf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,4BAA4BC,UAAWT,KAE3D,kBAAC,EAAD,SCDYU,QACW,cAA7BC,OAAOnD,SAASoD,UAEe,UAA7BD,OAAOnD,SAASoD,UAEhBD,OAAOnD,SAASoD,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEd/C,OAAM,SAAAgD,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.42647a16.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\nfunction Jumbotron() {\n    return (\n        <div className=\"jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"display-4\">Employee Directory</h1>\n            </div>\n        </div>\n    );\n}\n\nexport default Jumbotron;\n","import axios from \"axios\";\n\nconst BASEURL = \"https://randomuser.me/api/?results=50\";\n\nexport default {\n  loadEmps: function () {\n    return axios.get(BASEURL);\n  }\n};\n","import React from \"react\";\nimport \"./style.css\";\nimport Table from 'react-bootstrap/Table';\n\nfunction SearchResults(props) {\n\n  return (\n\n    <Table striped bordered hover variant=\"dark\">\n\n      <thead>\n        <tr>\n          <th>Image</th>\n          <th>Full Name</th>\n          <th>Email</th>\n          <th>Phone</th>\n          <th>Country</th>\n          <th>State</th>\n          <th>city</th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          props.employees.map((employee, a) => (\n            <tr key={a}>\n\n              <td><img src={employee.picture.thumbnail} alt={employee.name} /></td>\n              <td>{`${employee.name.first} ${employee.name.last}`}</td>\n              <td>{employee.email}</td>\n              <td>{employee.phone}</td>\n              <td>{employee.location.country}</td>\n              <td>{employee.location.state}</td>\n              <td>{employee.location.city}</td>\n\n            </tr>\n          ))\n        }\n      </tbody>\n    </Table>\n  )\n}\n\nexport default SearchResults;\n","import React, { useEffect, useState } from \"react\";\nimport \"./style.css\";\nimport Form from 'react-bootstrap/Form'\nimport API from '../../utils/API';\nimport SearchResults from \"../SearchResults\";\n\n\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\nfunction SearchForm() {\n\n  const [searchEmployee, setSearchEmployee] = useState(\"\");\n  const [employees, setEmployees] = useState([]);\n  const [filteredEmployees, setFilteredEmployees] = useState([]);\n\n\n  //Calls to load employees\n  useEffect(() => {\n    loadFifty()\n  }, [])\n\n  //Calls API\n  const loadFifty = () => {\n    API.loadEmps()\n      .then(res => {\n        setEmployees(res.data.results)\n        setFilteredEmployees(res.data.results)\n        // console.log(res.data)\n\n      })\n      .catch(err => console.log(err));\n  }\n\n  function employeeSearch(evt) {\n    filterEmployee(evt, employees);\n  }\n\n  function filterEmployee(evt, list) {\n    console.log(evt)\n    const filteredList = list.filter(employee => {\n      let values = Object.values(employee)\n        .join(\"\")\n        .toLowerCase();\n      return values.indexOf(evt.toLowerCase()) !== -1;\n    });\n    setFilteredEmployees(filteredList);\n\n  }\n\n  return (\n    <>\n      <Form.Group>\n        <Form.Label>Employee Name:</Form.Label>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Type employee name here...\"\n          name=\"searchEmployee\"\n          onChange={evt => employeeSearch(evt.target.value)}\n        />\n      </Form.Group>\n      <SearchResults employees={filteredEmployees} />\n    </>\n  );\n}\n\nexport default SearchForm;\n\n\n// employee.name.first.match(evt)","import React from \"react\";\nimport Jumbotron from '../components/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport SearchForm from \"../components/SearchForm\";\n\n\nfunction Home() {\n\n    return (\n        <div>\n            <Jumbotron />\n            <Container fluid>\n                <SearchForm />\n            </Container>\n        </div>\n    )\n}\n\nexport default Home;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n\n      <a href=\"https://github.com/Kinzito17/\" className=\"fa fa-github text-muted footer-links\" target=\"_blank\">Github</a>\n      <a href=\"https://www.linkedin.com/in/matthew-kinzle-3aa07568/\" className=\"fa fa-linkedin text-muted footer-links\" target=\"_blank\">LinkedIn</a>\n      <a href=\"https://www.instagram.com/kinzito/\" className=\"fa fa-instagram text-muted footer-links\" target=\"_blank\">Instagram</a>\n\n      <span className=\"text-muted footer-links\">MattyKinzle.com Â©</span>\n\n    </footer>\n  );\n}\n\nexport default Footer;\n\n\n\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Wrapper from \"./components/Wrapper\"\nimport Footer from \"./components/Footer\"\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Wrapper>\n          <Route exact path=\"/React-Employee-Directory\" component={Home} />\n        </Wrapper>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}