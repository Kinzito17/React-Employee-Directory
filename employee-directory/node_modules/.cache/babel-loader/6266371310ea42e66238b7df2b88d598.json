{"ast":null,"code":"var _jsxFileName = \"/Users/matthewkinzle/Desktop/FS BootCamp/HomeWork/React-Employee-Directory/employee-directory/src/components/SearchForm/index.js\";\nimport React, { useState } from \"react\";\nimport \"./style.css\";\nimport Form from 'react-bootstrap/Form'; // Using the datalist element we can create autofill suggestions based on the props.breeds array\n\nfunction SearchForm(props) {\n  console.log(props);\n  const [searchEmployee, setSearchEmployee] = useState(\"\");\n\n  function employeeSearches(e) {\n    setSearchEmployee(e);\n    filterEmployee(searchEmployee, props.employees);\n  }\n\n  function filterEmployee(e, list) {\n    const filteredList = list.filter(employee => employee.name.first.includes(e));\n\n    if (filteredList.length > 0) {\n      setEmployeeList(filteredList);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, \"Employee Name:\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    placeholder: \"Type employee name here...\",\n    name: \"searchEmployee\",\n    onChange: evt => employeeSearches(evt.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"datalist\", {\n    id: \"employees\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, props.employees.map(employee => /*#__PURE__*/React.createElement(\"option\", {\n    value: `${employee.name.first} ${employee.name.last}`,\n    key: `${employee.name.first} ${employee.name.last}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default SearchForm;","map":{"version":3,"sources":["/Users/matthewkinzle/Desktop/FS BootCamp/HomeWork/React-Employee-Directory/employee-directory/src/components/SearchForm/index.js"],"names":["React","useState","Form","SearchForm","props","console","log","searchEmployee","setSearchEmployee","employeeSearches","e","filterEmployee","employees","list","filteredList","filter","employee","name","first","includes","length","setEmployeeList","evt","target","value","map","last"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,sBAAjB,C,CAEA;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEA,QAAM,CAACG,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAAC,EAAD,CAApD;;AAEA,WAASQ,gBAAT,CAA0BC,CAA1B,EAA6B;AAC3BF,IAAAA,iBAAiB,CAACE,CAAD,CAAjB;AACAC,IAAAA,cAAc,CAACJ,cAAD,EAAiBH,KAAK,CAACQ,SAAvB,CAAd;AACD;;AAED,WAASD,cAAT,CAAwBD,CAAxB,EAA2BG,IAA3B,EAAiC;AAE/B,UAAMC,YAAY,GAAGD,IAAI,CAACE,MAAL,CAAYC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,QAApB,CAA6BT,CAA7B,CAAxB,CAArB;;AAEA,QAAII,YAAY,CAACM,MAAb,GAAsB,CAA1B,EAA6B;AAC3BC,MAAAA,eAAe,CAACP,YAAD,CAAf;AAED;AAEF;;AAED,sBACE,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,oBAAC,IAAD,CAAM,OAAN;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,4BAFd;AAGE,IAAA,IAAI,EAAC,gBAHP;AAIE,IAAA,QAAQ,EAAEQ,GAAG,IAAIb,gBAAgB,CAACa,GAAG,CAACC,MAAJ,CAAWC,KAAZ,CAJnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAQE;AAAU,IAAA,EAAE,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIpB,KAAK,CAACQ,SAAN,CAAgBa,GAAhB,CAAoBT,QAAQ,iBAC1B;AAAQ,IAAA,KAAK,EAAG,GAAEA,QAAQ,CAACC,IAAT,CAAcC,KAAM,IAAGF,QAAQ,CAACC,IAAT,CAAcS,IAAK,EAA5D;AACE,IAAA,GAAG,EAAG,GAAEV,QAAQ,CAACC,IAAT,CAAcC,KAAM,IAAGF,QAAQ,CAACC,IAAT,CAAcS,IAAK,EADpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,CARF,CADF;AAmBD;;AAED,eAAevB,UAAf","sourcesContent":["import React, { useState } from \"react\";\nimport \"./style.css\";\nimport Form from 'react-bootstrap/Form'\n\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\nfunction SearchForm(props) {\n  console.log(props)\n\n  const [searchEmployee, setSearchEmployee] = useState(\"\");\n\n  function employeeSearches(e) {\n    setSearchEmployee(e);\n    filterEmployee(searchEmployee, props.employees);\n  }\n\n  function filterEmployee(e, list) {\n\n    const filteredList = list.filter(employee => employee.name.first.includes(e));\n\n    if (filteredList.length > 0) {\n      setEmployeeList(filteredList);\n\n    }\n\n  }\n\n  return (\n    <Form.Group>\n      <Form.Label>Employee Name:</Form.Label>\n      <Form.Control\n        type=\"text\"\n        placeholder=\"Type employee name here...\"\n        name=\"searchEmployee\"\n        onChange={evt => employeeSearches(evt.target.value)}\n      />\n      <datalist id=\"employees\">\n        {\n          props.employees.map(employee => (\n            <option value={`${employee.name.first} ${employee.name.last}`}\n              key={`${employee.name.first} ${employee.name.last}`} />\n          ))\n        }\n      </datalist>\n    </Form.Group>\n  );\n}\n\nexport default SearchForm;\n"]},"metadata":{},"sourceType":"module"}