{"ast":null,"code":"import _slicedToArray from\"/Users/matthewkinzle/Desktop/FS BootCamp/HomeWork/React-Employee-Directory/employee-directory/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import\"./style.css\";import Form from'react-bootstrap/Form';import API from'../../utils/API';import SearchResults from\"../../components/SearchResults\";// Using the datalist element we can create autofill suggestions based on the props.breeds array\nfunction SearchForm(){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),searchEmployee=_useState2[0],setSearchEmployee=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),employees=_useState4[0],setEmployees=_useState4[1];//Calls to load employees\nuseEffect(function(){loadFifty();},[]);//Calls API\nvar loadFifty=function loadFifty(){API.loadEmps().then(function(res){setEmployees(res.data.results);console.log(res.data);}).catch(function(err){return console.log(err);});};function employeeSearch(evt){setSearchEmployee(evt);filterEmployee(searchEmployee,employees);}function filterEmployee(evt,list){var filteredList=list.filter(function(employee){return employee.name.first.match(evt);});if(filteredList.length>0){setEmployees(filteredList);}}return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Form.Group,null,/*#__PURE__*/React.createElement(Form.Label,null,\"Employee Name:\"),/*#__PURE__*/React.createElement(Form.Control,{type:\"text\",placeholder:\"Type employee name here...\",name:\"searchEmployee\",onChange:function onChange(evt){return employeeSearch(evt.target.value);}})),/*#__PURE__*/React.createElement(SearchResults,{employees:employees}));}export default SearchForm;","map":{"version":3,"sources":["/Users/matthewkinzle/Desktop/FS BootCamp/HomeWork/React-Employee-Directory/employee-directory/src/components/SearchForm/index.js"],"names":["React","useEffect","useState","Form","API","SearchResults","SearchForm","searchEmployee","setSearchEmployee","employees","setEmployees","loadFifty","loadEmps","then","res","data","results","console","log","catch","err","employeeSearch","evt","filterEmployee","list","filteredList","filter","employee","name","first","match","length","target","value"],"mappings":"oNAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAO,aAAP,CACA,MAAOC,CAAAA,IAAP,KAAiB,sBAAjB,CACA,MAAOC,CAAAA,GAAP,KAAgB,iBAAhB,CACA,MAAOC,CAAAA,aAAP,KAA0B,gCAA1B,CAGA;AACA,QAASC,CAAAA,UAAT,EAAsB,eAEwBJ,QAAQ,CAAC,EAAD,CAFhC,wCAEbK,cAFa,eAEGC,iBAFH,8BAGcN,QAAQ,CAAC,EAAD,CAHtB,yCAGbO,SAHa,eAGFC,YAHE,eAKpB;AACAT,SAAS,CAAC,UAAM,CACdU,SAAS,GACV,CAFQ,CAEN,EAFM,CAAT,CAIA;AACA,GAAMA,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtBP,GAAG,CAACQ,QAAJ,GACGC,IADH,CACQ,SAAAC,GAAG,CAAI,CACXJ,YAAY,CAACI,GAAG,CAACC,IAAJ,CAASC,OAAV,CAAZ,CACAC,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACC,IAAhB,EAED,CALH,EAMGI,KANH,CAMS,SAAAC,GAAG,QAAIH,CAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAAJ,EANZ,EAOD,CARD,CAUA,QAASC,CAAAA,cAAT,CAAwBC,GAAxB,CAA6B,CAC3Bd,iBAAiB,CAACc,GAAD,CAAjB,CACAC,cAAc,CAAChB,cAAD,CAAiBE,SAAjB,CAAd,CACD,CAED,QAASc,CAAAA,cAAT,CAAwBD,GAAxB,CAA6BE,IAA7B,CAAmC,CAEjC,GAAMC,CAAAA,YAAY,CAAGD,IAAI,CAACE,MAAL,CAAY,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,KAApB,CAA0BR,GAA1B,CAAJ,EAApB,CAArB,CAEA,GAAIG,YAAY,CAACM,MAAb,CAAsB,CAA1B,CAA6B,CAC3BrB,YAAY,CAACe,YAAD,CAAZ,CACD,CACF,CAED,mBACE,qDACE,oBAAC,IAAD,CAAM,KAAN,mBACE,oBAAC,IAAD,CAAM,KAAN,uBADF,cAEE,oBAAC,IAAD,CAAM,OAAN,EACE,IAAI,CAAC,MADP,CAEE,WAAW,CAAC,4BAFd,CAGE,IAAI,CAAC,gBAHP,CAIE,QAAQ,CAAE,kBAAAH,GAAG,QAAID,CAAAA,cAAc,CAACC,GAAG,CAACU,MAAJ,CAAWC,KAAZ,CAAlB,EAJf,EAFF,CADF,cAUE,oBAAC,aAAD,EAAe,SAAS,CAAExB,SAA1B,EAVF,CADF,CAcD,CAED,cAAeH,CAAAA,UAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./style.css\";\nimport Form from 'react-bootstrap/Form'\nimport API from '../../utils/API';\nimport SearchResults from \"../../components/SearchResults\";\n\n\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\nfunction SearchForm() {\n\n  const [searchEmployee, setSearchEmployee] = useState(\"\");\n  const [employees, setEmployees] = useState([]);\n\n  //Calls to load employees\n  useEffect(() => {\n    loadFifty()\n  }, [])\n\n  //Calls API\n  const loadFifty = () => {\n    API.loadEmps()\n      .then(res => {\n        setEmployees(res.data.results)\n        console.log(res.data)\n\n      })\n      .catch(err => console.log(err));\n  }\n\n  function employeeSearch(evt) {\n    setSearchEmployee(evt);\n    filterEmployee(searchEmployee, employees);\n  }\n\n  function filterEmployee(evt, list) {\n\n    const filteredList = list.filter(employee => employee.name.first.match(evt));\n\n    if (filteredList.length > 0) {\n      setEmployees(filteredList);\n    }\n  }\n\n  return (\n    <>\n      <Form.Group>\n        <Form.Label>Employee Name:</Form.Label>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Type employee name here...\"\n          name=\"searchEmployee\"\n          onChange={evt => employeeSearch(evt.target.value)}\n        />\n      </Form.Group>\n      <SearchResults employees={employees} />\n    </>\n  );\n}\n\nexport default SearchForm;\n"]},"metadata":{},"sourceType":"module"}